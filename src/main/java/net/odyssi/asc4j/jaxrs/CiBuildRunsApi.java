package net.odyssi.asc4j.jaxrs;

import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Response;

import net.odyssi.asc4j.model.CiBuildRunCreateRequest;

/**
 * App Store Connect API (Enhanced)
 *
 * <p>
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 */
@Path("/v1/ciBuildRuns")

public interface CiBuildRunsApi {

	@GET
	@Path("/{id}/actions")
	@Produces({ "application/json" })

	public Response ciBuildRunsActionsGetToManyRelated(@PathParam("id") String id,
			@QueryParam("fields[ciBuildRuns]") List<String> fieldsCiBuildRuns,
			@QueryParam("fields[ciBuildActions]") List<String> fieldsCiBuildActions, @QueryParam("limit") Integer limit,
			@QueryParam("include") List<String> include);

	@GET
	@Path("/{id}/builds")
	@Produces({ "application/json" })

	public Response ciBuildRunsBuildsGetToManyRelated(@PathParam("id") String id,
			@QueryParam("filter[betaAppReviewSubmission.betaReviewState]") List<String> filterBetaAppReviewSubmissionBetaReviewState,
			@QueryParam("filter[buildAudienceType]") List<String> filterBuildAudienceType,
			@QueryParam("filter[expired]") List<String> filterExpired,
			@QueryParam("filter[preReleaseVersion.platform]") List<String> filterPreReleaseVersionPlatform,
			@QueryParam("filter[preReleaseVersion.version]") List<String> filterPreReleaseVersionVersion,
			@QueryParam("filter[processingState]") List<String> filterProcessingState,
			@QueryParam("filter[usesNonExemptEncryption]") List<String> filterUsesNonExemptEncryption,
			@QueryParam("filter[version]") List<String> filterVersion,
			@QueryParam("filter[app]") List<String> filterApp,
			@QueryParam("filter[appStoreVersion]") List<String> filterAppStoreVersion,
			@QueryParam("filter[betaGroups]") List<String> filterBetaGroups,
			@QueryParam("filter[preReleaseVersion]") List<String> filterPreReleaseVersion,
			@QueryParam("filter[id]") List<String> filterId, @QueryParam("sort") List<String> sort,
			@QueryParam("fields[buildBundles]") List<String> fieldsBuildBundles,
			@QueryParam("fields[buildIcons]") List<String> fieldsBuildIcons,
			@QueryParam("fields[betaAppReviewSubmissions]") List<String> fieldsBetaAppReviewSubmissions,
			@QueryParam("fields[buildBetaDetails]") List<String> fieldsBuildBetaDetails,
			@QueryParam("fields[betaTesters]") List<String> fieldsBetaTesters,
			@QueryParam("fields[preReleaseVersions]") List<String> fieldsPreReleaseVersions,
			@QueryParam("fields[betaBuildLocalizations]") List<String> fieldsBetaBuildLocalizations,
			@QueryParam("fields[appStoreVersions]") List<String> fieldsAppStoreVersions,
			@QueryParam("fields[appEncryptionDeclarations]") List<String> fieldsAppEncryptionDeclarations,
			@QueryParam("fields[apps]") List<String> fieldsApps,
			@QueryParam("fields[builds]") List<String> fieldsBuilds,
			@QueryParam("fields[betaGroups]") List<String> fieldsBetaGroups, @QueryParam("limit") Integer limit,
			@QueryParam("limit[individualTesters]") Integer limitIndividualTesters,
			@QueryParam("limit[betaGroups]") Integer limitBetaGroups,
			@QueryParam("limit[betaBuildLocalizations]") Integer limitBetaBuildLocalizations,
			@QueryParam("limit[icons]") Integer limitIcons,
			@QueryParam("limit[buildBundles]") Integer limitBuildBundles, @QueryParam("include") List<String> include);

	@POST

	@Consumes({ "application/json" })
	@Produces({ "application/json" })

	public Response ciBuildRunsCreateInstance(CiBuildRunCreateRequest ciBuildRunCreateRequest);

	@GET
	@Path("/{id}")
	@Produces({ "application/json" })

	public Response ciBuildRunsGetInstance(@PathParam("id") String id,
			@QueryParam("fields[ciBuildRuns]") List<String> fieldsCiBuildRuns,
			@QueryParam("include") List<String> include,
			@QueryParam("fields[ciBuildActions]") List<String> fieldsCiBuildActions,
			@QueryParam("fields[builds]") List<String> fieldsBuilds, @QueryParam("limit[builds]") Integer limitBuilds);
}
