package net.odyssi.asc4j.jaxrs;

import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Response;

import net.odyssi.asc4j.model.ProfileCreateRequest;

/**
 * App Store Connect API (Enhanced)
 *
 * <p>
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 */
@Path("/v1/profiles")

public interface ProfilesApi {

	/**
	 * Create a Profile
	 *
	 * Create a new provisioning profile.
	 *
	 */
	@POST

	@Consumes({ "application/json" })
	@Produces({ "application/json" })

	public Response createProfile(ProfileCreateRequest profileCreateRequest);

	/**
	 * Delete a Profile
	 *
	 * Delete a provisioning profile that is used for app development or
	 * distribution.
	 *
	 */
	@DELETE
	@Path("/{id}")
	@Produces({ "application/json" })

	public Response deleteProfile(@PathParam("id") String id);

	/**
	 * List All Certificates in a Profile
	 *
	 * Get a list of all certificates and their data for a specific provisioning
	 * profile.
	 *
	 */
	@GET
	@Path("/{id}/certificates")
	@Produces({ "application/json" })

	public Response listProfileCertificates(@PathParam("id") String id,
			@QueryParam("fields[certificates]") List<String> fieldsCertificates, @QueryParam("limit") Integer limit);

	/**
	 * List All Devices in a Profile
	 *
	 * Get a list of all devices for a specific provisioning profile.
	 *
	 */
	@GET
	@Path("/{id}/devices")
	@Produces({ "application/json" })

	public Response listProfileDevices(@PathParam("id") String id,
			@QueryParam("fields[devices]") List<String> fieldsDevices, @QueryParam("limit") Integer limit);

	/**
	 * List and Download Profiles
	 *
	 * Find and list provisioning profiles and download their data.
	 *
	 */
	@GET

	@Produces({ "application/json" })

	public Response listProfiles(@QueryParam("filter[name]") List<String> filterName,
			@QueryParam("filter[profileState]") List<String> filterProfileState,
			@QueryParam("filter[profileType]") List<String> filterProfileType,
			@QueryParam("filter[id]") List<String> filterId, @QueryParam("sort") List<String> sort,
			@QueryParam("fields[profiles]") List<String> fieldsProfiles, @QueryParam("limit") Integer limit,
			@QueryParam("include") List<String> include,
			@QueryParam("fields[certificates]") List<String> fieldsCertificates,
			@QueryParam("fields[devices]") List<String> fieldsDevices,
			@QueryParam("fields[bundleIds]") List<String> fieldsBundleIds,
			@QueryParam("limit[certificates]") Integer limitCertificates,
			@QueryParam("limit[devices]") Integer limitDevices);

	/**
	 * Read the Bundle ID in a Profile
	 *
	 * Get the bundle ID information for a specific provisioning profile.
	 *
	 */
	@GET
	@Path("/{id}/bundleId")
	@Produces({ "application/json" })

	public Response readProfileBundleID(@PathParam("id") String id,
			@QueryParam("fields[bundleIds]") List<String> fieldsBundleIds);

	/**
	 * Read and Download Profile Information
	 *
	 * Get information for a specific provisioning profile and download its data.
	 *
	 */
	@GET
	@Path("/{id}")
	@Produces({ "application/json" })

	public Response readProfileInformation(@PathParam("id") String id,
			@QueryParam("fields[profiles]") List<String> fieldsProfiles, @QueryParam("include") List<String> include,
			@QueryParam("fields[certificates]") List<String> fieldsCertificates,
			@QueryParam("fields[devices]") List<String> fieldsDevices,
			@QueryParam("fields[bundleIds]") List<String> fieldsBundleIds,
			@QueryParam("limit[certificates]") Integer limitCertificates,
			@QueryParam("limit[devices]") Integer limitDevices);
}
