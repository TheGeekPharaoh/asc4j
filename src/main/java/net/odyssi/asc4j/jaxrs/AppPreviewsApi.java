package net.odyssi.asc4j.jaxrs;

import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.PATCH;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Response;

import net.odyssi.asc4j.model.AppPreviewCreateRequest;
import net.odyssi.asc4j.model.AppPreviewUpdateRequest;

/**
 * App Store Connect API (Enhanced)
 *
 * <p>
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 */
@Path("/v1/appPreviews")

public interface AppPreviewsApi {

	/**
	 * Create an App Preview
	 *
	 * Add a new app preview to a preview set.
	 *
	 */
	@POST

	@Consumes({ "application/json" })
	@Produces({ "application/json" })

	public Response createAppPreview(AppPreviewCreateRequest appPreviewCreateRequest);

	/**
	 * Delete an App Preview
	 *
	 * Delete an app preview within a preview set.
	 *
	 */
	@DELETE
	@Path("/{id}")
	@Produces({ "application/json" })

	public Response deleteAppPreview(@PathParam("id") String id);

	/**
	 * Modify an App Preview
	 *
	 * Commit the app preview after uploading it, and update the poster frame
	 * timecode.
	 *
	 */
	@PATCH
	@Path("/{id}")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })

	public Response modifyAppPreview(@PathParam("id") String id, AppPreviewUpdateRequest appPreviewUpdateRequest);

	/**
	 * Read App Preview Information
	 *
	 * Get information about an app preview and its upload and processing status.
	 *
	 */
	@GET
	@Path("/{id}")
	@Produces({ "application/json" })

	public Response readAppPreviewInformation(@PathParam("id") String id,
			@QueryParam("fields[appPreviews]") List<String> fieldsAppPreviews,
			@QueryParam("include") List<String> include);
}
