package net.odyssi.asc4j.jaxrs;

import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.PATCH;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Response;

import net.odyssi.asc4j.model.AppStoreVersionAppClipDefaultExperienceLinkageRequest;
import net.odyssi.asc4j.model.AppStoreVersionBuildLinkageRequest;
import net.odyssi.asc4j.model.AppStoreVersionCreateRequest;
import net.odyssi.asc4j.model.AppStoreVersionUpdateRequest;

/**
 * App Store Connect API (Enhanced)
 *
 * <p>
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 */
@Path("/v1/appStoreVersions")

public interface AppStoreVersionsApi {

	@GET
	@Path("/{id}/appStoreVersionExperiments")
	@Produces({ "application/json" })

	public Response appStoreVersionsAppStoreVersionExperimentsGetToManyRelated(@PathParam("id") String id,
			@QueryParam("filter[state]") List<String> filterState,
			@QueryParam("fields[appStoreVersionExperiments]") List<String> fieldsAppStoreVersionExperiments,
			@QueryParam("fields[appStoreVersionExperimentTreatments]") List<String> fieldsAppStoreVersionExperimentTreatments,
			@QueryParam("fields[appStoreVersions]") List<String> fieldsAppStoreVersions,
			@QueryParam("limit") Integer limit,
			@QueryParam("limit[appStoreVersionExperimentTreatments]") Integer limitAppStoreVersionExperimentTreatments,
			@QueryParam("include") List<String> include);

	/**
	 * Create an App Store Version
	 *
	 * Add a new App Store version or platform to an app.
	 *
	 */
	@POST

	@Consumes({ "application/json" })
	@Produces({ "application/json" })

	public Response createAppStoreVersion(AppStoreVersionCreateRequest appStoreVersionCreateRequest);

	/**
	 * Delete an App Store Version
	 *
	 * Delete an app store version that is associated with an app.
	 *
	 */
	@DELETE
	@Path("/{id}")
	@Produces({ "application/json" })

	public Response deleteAppStoreVersion(@PathParam("id") String id);

	/**
	 * Get the Build ID for an App Store Version
	 *
	 * Get the ID of the build that is attached to a specific App Store version.
	 *
	 */
	@GET
	@Path("/{id}/relationships/build")
	@Produces({ "application/json" })

	public Response getAppStoreVersionBuildID(@PathParam("id") String id);

	/**
	 * Get the Default App Clip Experience for an App Store Version
	 *
	 * Get the default App Clip experience for an App Store version of your app.
	 *
	 */
	@GET
	@Path("/{id}/appClipDefaultExperience")
	@Produces({ "application/json" })

	public Response getAppStoreVersionDefaultAppClipExperience(@PathParam("id") String id,
			@QueryParam("fields[appClips]") List<String> fieldsAppClips,
			@QueryParam("fields[appClipAppStoreReviewDetails]") List<String> fieldsAppClipAppStoreReviewDetails,
			@QueryParam("fields[appStoreVersions]") List<String> fieldsAppStoreVersions,
			@QueryParam("fields[appClipDefaultExperiences]") List<String> fieldsAppClipDefaultExperiences,
			@QueryParam("fields[appClipDefaultExperienceLocalizations]") List<String> fieldsAppClipDefaultExperienceLocalizations,
			@QueryParam("limit[appClipDefaultExperienceLocalizations]") Integer limitAppClipDefaultExperienceLocalizations,
			@QueryParam("include") List<String> include);

	/**
	 * Get the Default App Clip Experiences Resource ID for an App Store Version
	 *
	 * Get the ID of an appâ€™s related default App Clip experience.
	 *
	 */
	@GET
	@Path("/{id}/relationships/appClipDefaultExperience")
	@Produces({ "application/json" })

	public Response getAppStoreVersionDefaultAppClipExperienceID(@PathParam("id") String id);

	/**
	 * List All App Store Version Localizations for an App Store Version
	 *
	 * Get a list of localized, version-level information about an app, for all
	 * locales.
	 *
	 */
	@GET
	@Path("/{id}/appStoreVersionLocalizations")
	@Produces({ "application/json" })

	public Response listAppStoreVersionLocalizations(@PathParam("id") String id,
			@QueryParam("fields[appStoreVersionLocalizations]") List<String> fieldsAppStoreVersionLocalizations,
			@QueryParam("limit") Integer limit);

	/**
	 * Modify an App Store Version
	 *
	 * Update the app store version for a specific app.
	 *
	 */
	@PATCH
	@Path("/{id}")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })

	public Response modifyAppStoreVersion(@PathParam("id") String id,
			AppStoreVersionUpdateRequest appStoreVersionUpdateRequest);

	/**
	 * Modify the Build for an App Store Version
	 *
	 * Change the build that is attached to a specific App Store version.
	 *
	 */
	@PATCH
	@Path("/{id}/relationships/build")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })

	public Response modifyAppStoreVersionBuild(@PathParam("id") String id,
			AppStoreVersionBuildLinkageRequest appStoreVersionBuildLinkageRequest);

	/**
	 * Modify the Default App Clip Experience of an App Store Version
	 *
	 * Update the relationship between an App Store version and a default App Clip
	 * experience.
	 *
	 */
	@PATCH
	@Path("/{id}/relationships/appClipDefaultExperience")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })

	public Response modifyAppStoreVersionDefaultAppClipExperience(@PathParam("id") String id,
			AppStoreVersionAppClipDefaultExperienceLinkageRequest appStoreVersionAppClipDefaultExperienceLinkageRequest);

	/**
	 * Read the Age Rating Declaration Information of an App Store Version
	 *
	 * Get the age-related information declared for your app.
	 *
	 */
	@GET
	@Path("/{id}/ageRatingDeclaration")
	@Produces({ "application/json" })

	public Response readAppStoreVersionAgeRatingDeclaration(@PathParam("id") String id,
			@QueryParam("fields[ageRatingDeclarations]") List<String> fieldsAgeRatingDeclarations);

	/**
	 * Read the Build Information of an App Store Version
	 *
	 * Get the build that is attached to a specific App Store version.
	 *
	 */
	@GET
	@Path("/{id}/build")
	@Produces({ "application/json" })

	public Response readAppStoreVersionBuildInformation(@PathParam("id") String id,
			@QueryParam("fields[builds]") List<String> fieldsBuilds);

	/**
	 * Read the IDFA Declaration Information of an App Store Version
	 *
	 * Read your declared Advertising Identifier (IDFA) usage responses.
	 *
	 */
	@GET
	@Path("/{id}/idfaDeclaration")
	@Produces({ "application/json" })

	public Response readAppStoreVersionIDFADeclaration(@PathParam("id") String id,
			@QueryParam("fields[idfaDeclarations]") List<String> fieldsIdfaDeclarations);

	/**
	 * Read App Store Version Information
	 *
	 * Get information for a specific app store version.
	 *
	 */
	@GET
	@Path("/{id}")
	@Produces({ "application/json" })

	public Response readAppStoreVersionInformation(@PathParam("id") String id,
			@QueryParam("fields[appStoreVersions]") List<String> fieldsAppStoreVersions,
			@QueryParam("include") List<String> include,
			@QueryParam("fields[appStoreVersionExperiments]") List<String> fieldsAppStoreVersionExperiments,
			@QueryParam("fields[appStoreVersionSubmissions]") List<String> fieldsAppStoreVersionSubmissions,
			@QueryParam("fields[ageRatingDeclarations]") List<String> fieldsAgeRatingDeclarations,
			@QueryParam("fields[appStoreReviewDetails]") List<String> fieldsAppStoreReviewDetails,
			@QueryParam("fields[idfaDeclarations]") List<String> fieldsIdfaDeclarations,
			@QueryParam("fields[appClipDefaultExperiences]") List<String> fieldsAppClipDefaultExperiences,
			@QueryParam("fields[routingAppCoverages]") List<String> fieldsRoutingAppCoverages,
			@QueryParam("fields[appStoreVersionPhasedReleases]") List<String> fieldsAppStoreVersionPhasedReleases,
			@QueryParam("fields[builds]") List<String> fieldsBuilds,
			@QueryParam("fields[appStoreVersionLocalizations]") List<String> fieldsAppStoreVersionLocalizations,
			@QueryParam("limit[appStoreVersionExperiments]") Integer limitAppStoreVersionExperiments,
			@QueryParam("limit[appStoreVersionLocalizations]") Integer limitAppStoreVersionLocalizations);

	/**
	 * Read the App Store Version Phased Release Information of an App Store Version
	 *
	 * Read the phased release status and configuration for a version with phased
	 * release enabled.
	 *
	 */
	@GET
	@Path("/{id}/appStoreVersionPhasedRelease")
	@Produces({ "application/json" })

	public Response readAppStoreVersionPhasedReleaseInformation(@PathParam("id") String id,
			@QueryParam("fields[appStoreVersionPhasedReleases]") List<String> fieldsAppStoreVersionPhasedReleases);

	/**
	 * Read the App Store Review Details Resource Information of an App Store
	 * Version
	 *
	 * Get the details you provide to App Review so they can test your app.
	 *
	 */
	@GET
	@Path("/{id}/appStoreReviewDetail")
	@Produces({ "application/json" })

	public Response readAppStoreVersionReviewDetails(@PathParam("id") String id,
			@QueryParam("fields[appStoreReviewDetails]") List<String> fieldsAppStoreReviewDetails,
			@QueryParam("fields[appStoreVersions]") List<String> fieldsAppStoreVersions,
			@QueryParam("fields[appStoreReviewAttachments]") List<String> fieldsAppStoreReviewAttachments,
			@QueryParam("limit[appStoreReviewAttachments]") Integer limitAppStoreReviewAttachments,
			@QueryParam("include") List<String> include);

	/**
	 * Read the Routing App Coverage Information of an App Store Version
	 *
	 * Get the routing app coverage file that is associated with a specific App
	 * Store version
	 *
	 */
	@GET
	@Path("/{id}/routingAppCoverage")
	@Produces({ "application/json" })

	public Response readAppStoreVersionRoutingAppCoverage(@PathParam("id") String id,
			@QueryParam("fields[routingAppCoverages]") List<String> fieldsRoutingAppCoverages);

	/**
	 * Read the App Store Version Submission Information of an App Store Version
	 *
	 */
	@GET
	@Path("/{id}/appStoreVersionSubmission")
	@Produces({ "application/json" })

	public Response readAppStoreVersionSubmissionInformation(@PathParam("id") String id,
			@QueryParam("fields[appStoreVersionSubmissions]") List<String> fieldsAppStoreVersionSubmissions,
			@QueryParam("fields[appStoreVersions]") List<String> fieldsAppStoreVersions,
			@QueryParam("include") List<String> include);
}
