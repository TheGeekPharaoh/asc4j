package net.odyssi.asc4j.jaxrs;

import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Response;

import net.odyssi.asc4j.model.BetaTesterAppsLinkagesRequest;
import net.odyssi.asc4j.model.BetaTesterBetaGroupsLinkagesRequest;
import net.odyssi.asc4j.model.BetaTesterBuildsLinkagesRequest;
import net.odyssi.asc4j.model.BetaTesterCreateRequest;

/**
 * App Store Connect API (Enhanced)
 *
 * <p>
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 */
@Path("/v1/betaTesters")

public interface BetaTestersApi {

	/**
	 * Add a Beta Tester to Beta Groups
	 *
	 * Add one or more beta testers to a specific beta group.
	 *
	 */
	@POST
	@Path("/{id}/relationships/betaGroups")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })

	public Response addBetaTesterToBetaGroup(@PathParam("id") String id,
			BetaTesterBetaGroupsLinkagesRequest betaTesterBetaGroupsLinkagesRequest);

	/**
	 * Individually Assign a Beta Tester to Builds
	 *
	 * Individually assign a beta tester to a build.
	 *
	 */
	@POST
	@Path("/{id}/relationships/builds")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })

	public Response assignBetaTesterToBuilds(@PathParam("id") String id,
			BetaTesterBuildsLinkagesRequest betaTesterBuildsLinkagesRequest);

	/**
	 * Create a Beta Tester
	 *
	 * Create a beta tester assigned to a group, a build, or an app.
	 *
	 */
	@POST

	@Consumes({ "application/json" })
	@Produces({ "application/json" })

	public Response createBetaTester(BetaTesterCreateRequest betaTesterCreateRequest);

	/**
	 * Delete a Beta Tester
	 *
	 * Remove a beta tester&#39;s ability to test all apps.
	 *
	 */
	@DELETE
	@Path("/{id}")
	@Produces({ "application/json" })

	public Response deleteBetaTester(@PathParam("id") String id);

	/**
	 * Get All IDs of Builds Individually Assigned to a Beta Tester
	 *
	 * Get a list of build resource IDs individually assigned to a specific beta
	 * tester.
	 *
	 */
	@GET
	@Path("/{id}/relationships/builds")
	@Produces({ "application/json" })

	public Response getBetaTesterAssignedBuildIDs(@PathParam("id") String id, @QueryParam("limit") Integer limit);

	/**
	 * Get All Beta Group IDs of a Beta Tester&#39;s Groups
	 *
	 * Get a list of group resource IDs associated with a beta tester.
	 *
	 */
	@GET
	@Path("/{id}/relationships/betaGroups")
	@Produces({ "application/json" })

	public Response getBetaTesterBetaGroupIDs(@PathParam("id") String id, @QueryParam("limit") Integer limit);

	/**
	 * Get All App Resource IDs for a Beta Tester
	 *
	 * Get a list of app resource IDs associated with a beta tester.
	 *
	 */
	@GET
	@Path("/{id}/relationships/apps")
	@Produces({ "application/json" })

	public Response listBetaTesterAppIDs(@PathParam("id") String id, @QueryParam("limit") Integer limit);

	/**
	 * List All Apps for a Beta Tester
	 *
	 * Get a list of apps that a beta tester can test.
	 *
	 */
	@GET
	@Path("/{id}/apps")
	@Produces({ "application/json" })

	public Response listBetaTesterApps(@PathParam("id") String id, @QueryParam("fields[apps]") List<String> fieldsApps,
			@QueryParam("limit") Integer limit);

	/**
	 * List All Builds Individually Assigned to a Beta Tester
	 *
	 * Get a list of builds individually assigned to a specific beta tester.
	 *
	 */
	@GET
	@Path("/{id}/builds")
	@Produces({ "application/json" })

	public Response listBetaTesterAssignedBuilds(@PathParam("id") String id,
			@QueryParam("fields[builds]") List<String> fieldsBuilds, @QueryParam("limit") Integer limit);

	/**
	 * List All Beta Groups to Which a Beta Tester Belongs
	 *
	 * Get a list of beta groups that contain a specific beta tester.
	 *
	 */
	@GET
	@Path("/{id}/betaGroups")
	@Produces({ "application/json" })

	public Response listBetaTesterBetaGroups(@PathParam("id") String id,
			@QueryParam("fields[betaGroups]") List<String> fieldsBetaGroups, @QueryParam("limit") Integer limit);

	/**
	 * List Beta Testers
	 *
	 * Find and list beta testers for all apps, builds, and beta groups.
	 *
	 */
	@GET

	@Produces({ "application/json" })

	public Response listBetaTesters(@QueryParam("filter[email]") List<String> filterEmail,
			@QueryParam("filter[firstName]") List<String> filterFirstName,
			@QueryParam("filter[inviteType]") List<String> filterInviteType,
			@QueryParam("filter[lastName]") List<String> filterLastName,
			@QueryParam("filter[apps]") List<String> filterApps,
			@QueryParam("filter[betaGroups]") List<String> filterBetaGroups,
			@QueryParam("filter[builds]") List<String> filterBuilds, @QueryParam("filter[id]") List<String> filterId,
			@QueryParam("sort") List<String> sort, @QueryParam("fields[betaTesters]") List<String> fieldsBetaTesters,
			@QueryParam("limit") Integer limit, @QueryParam("include") List<String> include,
			@QueryParam("fields[apps]") List<String> fieldsApps,
			@QueryParam("fields[builds]") List<String> fieldsBuilds,
			@QueryParam("fields[betaGroups]") List<String> fieldsBetaGroups,
			@QueryParam("limit[apps]") Integer limitApps, @QueryParam("limit[betaGroups]") Integer limitBetaGroups,
			@QueryParam("limit[builds]") Integer limitBuilds);

	/**
	 * Read Beta Tester Information
	 *
	 * Get a specific beta tester.
	 *
	 */
	@GET
	@Path("/{id}")
	@Produces({ "application/json" })

	public Response readBetaTesterInformation(@PathParam("id") String id,
			@QueryParam("fields[betaTesters]") List<String> fieldsBetaTesters,
			@QueryParam("include") List<String> include, @QueryParam("fields[apps]") List<String> fieldsApps,
			@QueryParam("fields[builds]") List<String> fieldsBuilds,
			@QueryParam("fields[betaGroups]") List<String> fieldsBetaGroups,
			@QueryParam("limit[apps]") Integer limitApps, @QueryParam("limit[betaGroups]") Integer limitBetaGroups,
			@QueryParam("limit[builds]") Integer limitBuilds);

	/**
	 * Remove a Beta Testerâ€™s Access to Apps
	 *
	 * Remove a specific beta tester&#39;s access to test any builds of one or more
	 * apps.
	 *
	 */
	@DELETE
	@Path("/{id}/relationships/apps")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })

	public Response removeBetaTesterFromApps(@PathParam("id") String id,
			BetaTesterAppsLinkagesRequest betaTesterAppsLinkagesRequest);

	/**
	 * Remove a Beta Tester from Beta Groups
	 *
	 * Remove a specific beta tester from one or more beta groups, revoking their
	 * access to test builds associated with those groups.
	 *
	 */
	@DELETE
	@Path("/{id}/relationships/betaGroups")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })

	public Response removeBetaTesterFromBetaGroup(@PathParam("id") String id,
			BetaTesterBetaGroupsLinkagesRequest betaTesterBetaGroupsLinkagesRequest);

	/**
	 * Individually Unassign a Beta Tester from Builds
	 *
	 * Remove an individually assigned beta tester&#39;s ability to test a build.
	 *
	 */
	@DELETE
	@Path("/{id}/relationships/builds")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })

	public Response unassignBetaTesterFromBuilds(@PathParam("id") String id,
			BetaTesterBuildsLinkagesRequest betaTesterBuildsLinkagesRequest);
}
