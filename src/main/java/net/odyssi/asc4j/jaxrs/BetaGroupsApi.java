package net.odyssi.asc4j.jaxrs;

import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.PATCH;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Response;

import net.odyssi.asc4j.model.BetaGroupBetaTestersLinkagesRequest;
import net.odyssi.asc4j.model.BetaGroupBuildsLinkagesRequest;
import net.odyssi.asc4j.model.BetaGroupCreateRequest;
import net.odyssi.asc4j.model.BetaGroupUpdateRequest;

/**
 * App Store Connect API (Enhanced)
 *
 * <p>
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 */
@Path("/v1/betaGroups")

public interface BetaGroupsApi {

	/**
	 * Add Beta Testers to a Beta Group
	 *
	 * Add a specific beta tester to one or more beta groups for beta testing.
	 *
	 */
	@POST
	@Path("/{id}/relationships/betaTesters")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })

	public Response addBetaTestersToBetaGroup(@PathParam("id") String id,
			BetaGroupBetaTestersLinkagesRequest betaGroupBetaTestersLinkagesRequest);

	/**
	 * Add Builds to a Beta Group
	 *
	 * Associate builds with a beta group to enable the group to test the builds.
	 *
	 */
	@POST
	@Path("/{id}/relationships/builds")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })

	public Response addBuildsToBetaGroup(@PathParam("id") String id,
			BetaGroupBuildsLinkagesRequest betaGroupBuildsLinkagesRequest);

	/**
	 * Create a Beta Group
	 *
	 * Create a beta group associated with an app, optionally enabling TestFlight
	 * public links.
	 *
	 */
	@POST

	@Consumes({ "application/json" })
	@Produces({ "application/json" })

	public Response createBetaGroup(BetaGroupCreateRequest betaGroupCreateRequest);

	/**
	 * Delete a Beta Group
	 *
	 * Delete a beta group and remove beta tester access to associated builds.
	 *
	 */
	@DELETE
	@Path("/{id}")
	@Produces({ "application/json" })

	public Response deleteBetaGroup(@PathParam("id") String id);

	/**
	 * Get All Beta Tester IDs in a Beta Group
	 *
	 * Get a list of the beta tester resource IDs in a specific beta group.
	 *
	 */
	@GET
	@Path("/{id}/relationships/betaTesters")
	@Produces({ "application/json" })

	public Response getBetaGroupBetaTesterIDs(@PathParam("id") String id, @QueryParam("limit") Integer limit);

	/**
	 * Get All Build IDs in a Beta Group
	 *
	 * Get a list of build resource IDs in a specific beta group.
	 *
	 */
	@GET
	@Path("/{id}/relationships/builds")
	@Produces({ "application/json" })

	public Response getBetaGroupBuildIDs(@PathParam("id") String id, @QueryParam("limit") Integer limit);

	/**
	 * List All Beta Testers in a Beta Group
	 *
	 * Get a list of beta testers contained in a specific beta group.
	 *
	 */
	@GET
	@Path("/{id}/betaTesters")
	@Produces({ "application/json" })

	public Response listBetaGroupBetaTesters(@PathParam("id") String id,
			@QueryParam("fields[betaTesters]") List<String> fieldsBetaTesters, @QueryParam("limit") Integer limit);

	/**
	 * List All Builds for a Beta Group
	 *
	 * Get a list of builds associated with a specific beta group.
	 *
	 */
	@GET
	@Path("/{id}/builds")
	@Produces({ "application/json" })

	public Response listBetaGroupBuilds(@PathParam("id") String id,
			@QueryParam("fields[builds]") List<String> fieldsBuilds, @QueryParam("limit") Integer limit);

	/**
	 * List Beta Groups
	 *
	 * Find and list beta groups for all apps.
	 *
	 */
	@GET

	@Produces({ "application/json" })

	public Response listBetaGroups(@QueryParam("filter[isInternalGroup]") List<String> filterIsInternalGroup,
			@QueryParam("filter[name]") List<String> filterName,
			@QueryParam("filter[publicLink]") List<String> filterPublicLink,
			@QueryParam("filter[publicLinkEnabled]") List<String> filterPublicLinkEnabled,
			@QueryParam("filter[publicLinkLimitEnabled]") List<String> filterPublicLinkLimitEnabled,
			@QueryParam("filter[app]") List<String> filterApp, @QueryParam("filter[builds]") List<String> filterBuilds,
			@QueryParam("filter[id]") List<String> filterId, @QueryParam("sort") List<String> sort,
			@QueryParam("fields[betaGroups]") List<String> fieldsBetaGroups, @QueryParam("limit") Integer limit,
			@QueryParam("include") List<String> include,
			@QueryParam("fields[betaTesters]") List<String> fieldsBetaTesters,
			@QueryParam("fields[apps]") List<String> fieldsApps,
			@QueryParam("fields[builds]") List<String> fieldsBuilds,
			@QueryParam("limit[betaTesters]") Integer limitBetaTesters,
			@QueryParam("limit[builds]") Integer limitBuilds);

	/**
	 * Modify a Beta Group
	 *
	 * Modify a beta group&#39;s metadata, including changing its Testflight public
	 * link status.
	 *
	 */
	@PATCH
	@Path("/{id}")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })

	public Response modifyBetaGroup(@PathParam("id") String id, BetaGroupUpdateRequest betaGroupUpdateRequest);

	/**
	 * Read the App Information of a Beta Group
	 *
	 * Get the app information for a specific beta group.
	 *
	 */
	@GET
	@Path("/{id}/app")
	@Produces({ "application/json" })

	public Response readBetaGroupAppInformation(@PathParam("id") String id,
			@QueryParam("fields[apps]") List<String> fieldsApps);

	/**
	 * Read Beta Group Information
	 *
	 * Get a specific beta group.
	 *
	 */
	@GET
	@Path("/{id}")
	@Produces({ "application/json" })

	public Response readBetaGroupInformation(@PathParam("id") String id,
			@QueryParam("fields[betaGroups]") List<String> fieldsBetaGroups,
			@QueryParam("include") List<String> include,
			@QueryParam("fields[betaTesters]") List<String> fieldsBetaTesters,
			@QueryParam("fields[apps]") List<String> fieldsApps,
			@QueryParam("fields[builds]") List<String> fieldsBuilds,
			@QueryParam("limit[betaTesters]") Integer limitBetaTesters,
			@QueryParam("limit[builds]") Integer limitBuilds);

	/**
	 * Remove Beta Testers from a Beta Group
	 *
	 * Remove a specific beta tester from a one or more beta groups, revoking their
	 * access to test builds associated with those groups.
	 *
	 */
	@DELETE
	@Path("/{id}/relationships/betaTesters")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })

	public Response removeBetaTestersFromBetaGroup(@PathParam("id") String id,
			BetaGroupBetaTestersLinkagesRequest betaGroupBetaTestersLinkagesRequest);

	/**
	 * Remove Builds from a Beta Group
	 *
	 * Remove access to test one or more builds from beta testers in a specific beta
	 * group.
	 *
	 */
	@DELETE
	@Path("/{id}/relationships/builds")
	@Consumes({ "application/json" })
	@Produces({ "application/json" })

	public Response removeBuildsFromBetaGroup(@PathParam("id") String id,
			BetaGroupBuildsLinkagesRequest betaGroupBuildsLinkagesRequest);
}
